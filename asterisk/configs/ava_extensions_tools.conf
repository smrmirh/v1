; Extensions tools



[sub-checklegs]
; ARG1 : CALLERID-num
; ARG2 : Original EXTEN : Destination number
exten => caller,1,Noop(***** sub-checklegs for ARG1(${ARG1}):ARG2(${ARG2}))
	same => n,ExecIf($[ ${LEN(${BLINDTRANSFER})} > 0 ]?Goto(bxfer,1))
	same => n(clean),Noop(***** AVA ORIGIN : ${AVA_ORIGIN})
	same => n,Noop(*********** DNID : ${CALLERID(dnid)})
	same => n,Noop(******* CALLERID : ${CALLERID(num)})
	same => n,Noop(******** CHANNEL : ${CHANNEL} )
	same => n,Noop(******** CONTEXT : ${CONTEXT} )
	same => n,Noop(********** EXTEN : ${EXTEN} )
	same => n,Noop(******* UNIQUEID : ${UNIQUEID} )
	same => n,Noop(***** BRIDGEPEER : ${BRIDGEPEER} )
	same => n,Set(AVA_DOUT=0)
	same => n,Set(AVA_DOUTMSG=)
	same => n,Set(AVA_DOUTNUM=)
	same => n,Set(AVA_DOUTNUMTYPE=)
	same => n,Set(AVA_DSTRING=)
	same => n,Set(AVA_DOPTIONS=)
	same => n,ExecIf($[ "${AVA_ORIGIN}" = "QUEUE" ]?Goto(queue))
	same => n,ExecIf($[]?Goto(inbound))
	same => n,GotoIf($[ ${STNFIRSTLOGGER} ]?stnpickfirst:stnpicklast) 
	same => n(stnpickfirst),Set(ARRAY(CALLER_ID,CALLER_ENABLED,CALLER_FULLNAME,CALLER_EXT,CALLER_MOBILE,CALLER_EMAIL,CALLER_RECORDOUT,CALLER_VOTEOUT,CALLER_DEPID,CALLER_DOUTPOLICY,CALLER_DOUTROUTEID,CALLER_DOUTTIMER)=${ALP_SOURCEPICKFIRST(${CALLERID(num)})})
	same => n,Goto(aftercheck)
	same => n(stnpicklast),Set(ARRAY(CALLER_ID,CALLER_ENABLED,CALLER_FULLNAME,CALLER_EXT,CALLER_MOBILE,CALLER_EMAIL,CALLER_RECORDOUT,CALLER_VOTEOUT,CALLER_DEPID,CALLER_DOUTPOLICY,CALLER_DOUTROUTEID,CALLER_DOUTTIMER)=${ALP_SOURCEPICKLAST(${CALLERID(num)})})
	same => n(aftercheck),Noop(***** Anyone landing on ${CALLERID(num)} ???)
	same => n,ExecIf($[ ${EXISTS(${CALLER_ID})} ]?Goto(validcaller,1))
	same => n,Set(ARRAY(STN_COUNT,STN_ENABLED,STN_DOUT,STN_DOUTPOLICY,STN_DOUTROUTEID)=${ALP_STATIONPROFILE(${CALLERID(num)})})
	same => n,ExecIf($[ ${STN_COUNT} ]?Goto(validstation,1))
	same => n,Noop(Call originator is not defined anywhere in our core : Hanging up)
	same => n,Set(DIALSTATUS=CONGESTION)
	same => n,Hangup()
	same => n(inbound),Noop(***** SOURCE : INBOUND CALL : ${CHANNEL})
	; This is the place where inbound calls come
	;same => n,Goto(ava-users,${ARG2},1)
	same => n,Goto(callee,1)
	; This is the place where we send QUEUE APP calls
	same => n(queue),Noop(***** SOURCE : QUEUE APPLICATION)
	same => n,Set(ARRAY(AGENT_COUNT,__AGENT_ID,AGENT_PLUGGED,AGENT_FULLNAME,__AGENT_EXT,AGENT_MOBILE,AGENT_STATION,AGENT_EMAIL,AGENT_DIVERT,AGENT_DEPID,AGENT_NOTIFYMISSMAIL)=${ALP_AGENT(${ARG2})})
	same => n,ExecIf($[ ! ${AGENT_COUNT} ]?Goto(invalidagent))
	same => n,ExecIf($[ "${AGENT_STATION}" = "" | ! ${AGENT_PLUGGED} ]?Goto(unavailagent))
	; We are preparing to call agent
	same => n,Set(AVA_DOUT=1)
	same => n,Set(AVA_DOUTMSG=IAMQUEUE)
	same => n,Set(AVA_DOUTNUMTYPE=LOCALAGENT)
	same => n,Set(CDR(agent)=${AGENT_EXT})
	same => n,Set(CDR(station)=${AGENT_STATION})
	same => n,Set(CDR(qid)=${QUEUE_ID})
	same => n,Set(CDR(aid)=${AGENT_ID})
	same => n,Set(CDR(depid)=${AGENT_DEPID})
	same => n,Set(CDR(number)=${ARG1})
	same => n,Set(CDR(ctype)=QUEUE)
	same => n,Set(AVA_DOPTIONS=G(ava-queuepa^s^1))
	same => n,Set(_AVA_QAGENT=${AGENT_EXT})
	same => n,Noop(********** QUEUE VOTING : ${QUEUE_VOTING})
	same => n,Noop(****** QUEUE DOUTPOLICY : ${QUEUE_DOUTPOLICY})
	same => n,Noop(***** QUEUE DOUTROUTEID : ${QUEUE_DOUTROUTEID})
	same => n,Noop(******* QUEUE RECORDING : ${QUEUE_RECORDING})
	same => n,Noop(*********** QUEUE INTRO : ${QUEUE_INTRO})
	same => n,ExecIf($[ ${QUEUE_RECORDING} ]?GoSub(sub-monitor,s,1(QUEUE,${ARG1},${ARG2})))
	same => n,Set(DEVICE_STATE(Custom:${AGENT_EXT})=RINGING)
	same => n,ExecIf($[ "${AGENT_STATION}" = "EXTERNAL" ]?Goto(externalagent))
	same => n,Noop(***** Agent is locally available : ${AGENT_EXT} : ${AGENT_STATION})
	same => n,Set(AVA_DSTRING=${DIALTECH}/${AGENT_STATION})
	;same => n,Set(DEVICE_STATE(Custom:${AGENT_STATION})=RINGING)
	same => n,Noop(************ QUEUE NAME : ${QUEUE_NAME})
	same => n,Return()
	; externalagent : When agent is unpaused and station field is EXTERNAL , so it is EXTERNAL
	same => n(externalagent),Noop(***** ${AGENT_FULLNAME}(${AGENT_EXT}) is available on EXTERNAL(${AGENT_MOBILE}))
	same => n,Noop(***** Route policy of this queue must be checked)
	same => n,GoSub(sub-dout,s,1(${AGENT_MOBILE},${QUEUE_DOUTPOLICY},${ARG1},${QUEUE_DOUTROUTEID}))
	same => n,Noop(************ AVA DOUT : ${AVA_DOUT})
	same => n,Noop(********* AVA DOUTMSG : ${AVA_DOUTMSG})
	same => n,Noop(***** AVA DOUTNUMTYPE : ${AVA_DOUTNUMTYPE})
	same => n,Set(AVA_DOUTNUMTYPE=EXTERNALAGENT)
	same => n,ExecIf($[ ! ${AVA_DOUT} ]?Goto(unavailagent))
	same => n,Return()
	same => n(invalidagent),Noop(***** How this could happened? Error:${ARG2} is a queue member but does not exist among users )
	same => n,Set(DIALSTATUS=CONGESTION)
	same => n(unavailagent),Noop(***** How this could happened? Error:${ARG2} is not plugged or station field is null, but its available for calls )
	same => n,Set(DIALSTATUS=CHANUNAVAIL)
	same => n,Return()
	
	
exten => validcaller,1,Noop(***** Changing channel originator to : ${CALLER_EXT}(${CALLER_FULLNAME}))
	same => n,Set(LEG1=U)
	same => n,Set(AVA_ORIGIN=USER)
	same => n,Set(CALLER_STATION=${CALLERID(num)})
	same => n,Set(CDR(aid)=${CALLER_ID})
	same => n,Set(CDR(depid)=${CALLER_DEPID})
	same => n,Set(CDR(station)=${CALLERID(num)})
	same => n,Set(CALLERID(all)=${CALLER_FULLNAME}<${CALLER_EXT}>)
	; Allowed to call
	same => n,Noop(***** ${CALLER_FULLNAME} granted : ${AVA_DOUTMSG})
	same => n,Set(DEVICE_STATE(Custom:${CALLER_EXT})=INUSE)
	same => n,Goto(callee,1)
	

exten => callee,1,Noop(***** Checking callee! )
	same => n,Set(ARRAY(CALLEE_COUNT,CALLEE_ID,CALLEE_ENABLED,CALLEE_PLUGGED,CALLEE_FULLNAME,_CALLEE_EXT,CALLEE_MOBILE,CALLEE_EMAIL,CALLEE_STATION,CALLEE_DIVERT,CALLEE_DND,CALLEE_VM,CALLEE_FAX,CALLEE_RECORDIN,CALLEE_VOTEIN,CALLEE_CALLWAITING,CALLEE_CAMPON,CALLEE_RINGTIME,CALLEE_NOTIFYMISSCALL,CALLEE_NOTIFYVMMAIL,CALLEE_NOTIFYFAXMAIL)=${ALP_CALLEE(${ARG2})})
	same => n,Noop(******** COUNT : ${CALLEE_COUNT})
	same => n,Noop(*********** ID : ${CALLEE_ID})
	same => n,Noop(***** FULLNAME : ${CALLEE_FULLNAME})
	same => n,Noop(****** ENABLED : ${CALLEE_ENABLED})
	same => n,Noop(******** WIRED : ${CALLEE_PLUGGED})
	same => n,ExecIf($[ ${CALLEE_COUNT} ]?Goto(validcallee,1))
	; Probably outbound calls
	same => n,Noop(***** Unable to find ${ARG2} in db)
	same => n,ExecIf($[ "${LEG1}" = "U"]?Set(CDR(ctype)=U2O))
	same => n,ExecIf($[ "${LEG1}" = "U"]?Set(AVA_ORIGIN=U2O))
	same => n,ExecIf($[ "${LEG1}" = "S"]?Set(CDR(ctype)=S2O))
	same => n,ExecIf($[ "${LEG1}" = "S"]?Set(AVA_ORIGIN=S2O))
	same => n,Noop(***** External Number !!!!!)
	same => n,Noop(***** External Number !!!!!)
	same => n,Noop(***** Sending ${ARG2} for dout checking)
	same => n,ExecIf($[ ${EXISTS(${CALLER_ID})} ]?GoSub(sub-dout,s,1(${ARG2},${CALLER_DOUTPOLICY},${ARG1},${CALLER_DOUTROUTEID})))
	same => n,ExecIf($[ ${STN_COUNT} ]?GoSub(sub-dout,s,1(${ARG2},${STN_DOUTPOLICY},${ARG1},${CALLER_DOUTROUTEID})))
	same => n,Noop(************ AVA DOUT : ${AVA_DOUT})
	same => n,Noop(********* AVA_DOUTNUM : ${AVA_DOUTNUM})
	same => n,Noop(***** AVA_DOUTNUMTYPE : ${AVA_DOUTNUMTYPE})
	same => n,Noop(********* AVA_DOUTMSG : ${AVA_DOUTMSG})
	same => n,Noop(********* AVA_DSTRING : ${AVA_DSTRING})
	same => n,ExecIf($[ ! ${AVA_DOUT} ]?Goto(donotcall))
	same => n,ExecIf($[ ${CALLER_DOUTTIMER} > 0 ]?Set(AVA_DOUTTIMER)=$[ 1000 * ${CALLER_DOUTTIMER} ])
	same => n,ExecIf($[ ${CALLER_VOTEOUT} ]?Set(AVA_DOPTIONS=F)
	same => n,ExecIf($[ ${EXISTS(${CALLER_ID})} & ${CALLER_RECORDOUT} ]?GoSub(sub-monitor,s,1(U2O,${CALLER_EXT},${ARG2})))
	;same => n,ExecIf($[ "${LEG1}" = "S"]?Set(CDR(ctype=S2O)))
	;same => n,ExecIf($[ "${LEG1}" = "S"]?Set(AVA_ORIGIN=S2O))
	;same => n,ExecIf($[ "${LEG1}" = "U"]?Set(CDR(ctype=U2O)))
	;same => n,ExecIf($[ "${LEG1}" = "U"]?Set(AVA_ORIGIN=U2O))
	same => n,Set(CDR(agent)=${CALLER_EXT})
	same => n,Set(CDR(number)=${ARG2})
	same => n,Goto(ava-outbound,${ARG2},1)
	same => n,Return()
	same => n(donotcall),Noop(***** CAN NOT PLACE THIS CALL FOR ${CALLER_EXT}(${CALLER_FULLNAME}) -Error : ${AVA_DOUTMSG} )
	same => n,Set(DIALSTATUS=${DS_FORBIDDEN})
	same => n,Hangup

	
	
exten => validcallee,1,Noop(***** Callee exists)
	same => n,ExecIf($[ ${EXISTS(${CALLER_ID})} ]?Goto(internal))
	same => n,ExecIf($[ ${STN_COUNT} ]?Goto(station))
	same => n,Noop(***** AVA ORIGIN : ${AVA_ORIGIN} )
	same => n,Noop(********* CALLER : ${ARG1})
	same => n,Noop(********* CALLEE : ${ARG2})
	same => n,Goto(ava-users,${CALLEE_EXT},1)
	; internal call made by station to user
	same => n(station),Noop( Station(${CALLERID(num)}) CALLING ARG2(${CALLEE_FULLNAME}))
	same => n,Set(AVA_ORIGIN=S2U)
	same => n,Set(CDR(ctype)=S2U)
	same => n,GoSub(sub-dout,s,1(${ARG2},${STN_DOUTPOLICY},${ARG1},${STN_DOUTROUTEID}))
	; Need to deploy Station policy for making internal calls 
	; For now, low priority to code it
	; Returning FORBIDDEN
	same => n,Set(DIALSTATUS=${DS_FORBIDDEN})
	same => n,Return()
	; Internal call user to user
	same => n(internal),Noop(***** ARG1(${CALLER_FULLNAME} CALLING ARG2(${CALLEE_FULLNAME}))
	same => n,Set(CDR(ctype=U2U))
	same => n,Set(AVA_ORIGIN=U2U)
	same => n,ExecIf($[ "${CALLER_ID}" != "${CALLEE_ID}" ]?Goto(noselfcall))
	; Below : When validcaller calls self
	same => n,Set(DIALSTATUS=BUSY)
	same => n,Set(CDR(ctype)=ERR:SELFCALL)
	same => n,Hangup()
	same => n(noselfcall),Set(CDR(ctype)=U2U)
	same => n,GoSub(sub-dout,s,1(${ARG2},${CALLER_DOUTPOLICY},${ARG1},${CALLER_DOUTROUTEID}))
	same => n,Noop(************ AVA DOUT : ${AVA_DOUT})
	same => n,Noop(********* AVA DOUTNUM : ${AVA_DOUTNUM})
	same => n,Noop(***** AVA DOUTNUMTYPE : ${AVA_DOUTNUMTYPE})
	same => n,Noop(********* AVA DOUTMSG : ${AVA_DOUTMSG})
	same => n,ExecIf($[ ${AVA_DOUT} ]?Goto(ava-users,${CALLEE_EXT},1))
	same => n,Set(DIALSTATUS=${DS_FORBIDDEN})
	same => n,Return()
	; ABTIN ABTIN
	same => n,Set(AVA_DOUTNUM=${CALLEE_EXT})
	same => n,Set(AVA_DOUTNUMTYPE=internal)
	same => n,ExecIf($[ ${EXISTS(${CALLER_ID})} ]?Goto(internal-2v))
	same => n,ExecIf($[ ${STN_ENABLED} ]?Goto(internal-1v))
	same => n,Wait(60)
	same => n(internal-1v),Noop(**************INTERNAL-ONE-VALID**************)
	same => n,Noop(***** CALLER : ${ARG1} :::: UNDEFINED )
	same => n,Noop(***** CALLEE : ${ARG2} :::: ${CALLEE_FULLNAME} )
	same => n,Set(AVA_DOUT=${ALP_DOUTPOLICY(internal,${STN_DOUTROUTEID})})
	same => n,ExecIf($[ ${AVA_DOUT} ]?Goto(setcall-1v))
	same => n,Set(AVA_DOUTMSG=FORBIDDEN)
	same => n,Noop(***** UNABLE TO MAKE INTERNAL CALL FROM ${ARG1})
	same => n,Noop(***** FORBIDDEN !!!! FORBIDDEN !!!!)
	same => n,Return()
	same => n(internal-2v),Noop(**************INTERNAL-BOTH-VALID**************)
	same => n,Noop(***** Setting up a channel for)
	same => n,Noop(***** CALLER : ${CALLER_EXT} :::: ${CALLER_FULLNAME} )
	same => n,Noop(***** CALLEE : ${ARG2} :::: ${CALLEE_FULLNAME} )
	same => n,Noop(***** DOUTROUTEID : ${CALLER_DOUTROUTEID} )
	same => n,Noop(***** Checking dout policy)
	same => n,Set(CDR(ctype)=INTERNAL)
	same => n,Set(AVA_DOUT=${ALP_DOUTPOLICY(internal,${CALLER_DOUTPOLICY})})
	same => n,ExecIf($[ ${AVA_DOUT} ]?Goto(setcall-2v))
	same => n,Set(AVA_DOUTMSG=FORBIDDEN)
	same => n,Return()
	same => n(setcall-1v),Noop(***** DOUT GRANTED 1V)
	same => n,Set(AVA_DSTRING=${DIALTECH}/${CALLEE_STATION})
	same => n,Return()
	same => n(setcall-2v),Noop(***** DOUT GRANTED 2V)
	; Do stuffs for DND,VM,DIVERT ....
	same => n,Noop(************ CALLEE DETAILS *******)
	same => n,Noop(******** FULLNAME : ${CALLEE_FULLNAME} )
	same => n,Noop(********* ENABLED : ${CALLEE_ENABLED})
	same => n,Noop(*********** EMAIL : ${CALLEE_EMAIL})
	same => n,Noop(********** MOBILE : ${CALLEE_MOBILE})
	same => n,Noop(********* PLUGGED : ${CALLEE_PLUGGED})
	same => n,Noop(********** DIVERT : ${CALLEE_DIVERT})
	same => n,Noop(************* DND : ${CALLEE_DND})
	same => n,Noop(***** CALLWAITING : ${CALLEE_CALLWAITING})
	same => n,Noop(********** CAMPON : ${CALLEE_CAMPON})
	same => n,Noop(************* FAX : ${CALLEE_FAX})
	same => n,Noop(******* RECORD_IN : ${CALLEE_RECORDIN})
	same => n,Noop(********* VOTE IN : ${CALLEE_VOTEIN})
	same => n,Noop(******** RINGTIME : ${CALLEE_RINGTIME})
	same => n,Noop(********* STATION : ${CALLEE_STATION})
	same => n,Noop(*********************************)
	same => n,Set(AVA_DSTRING=${DIALTECH}/${CALLEE_STATION})
	same => n,Return()
	
	
exten => validstation,1,Noop(***** ${CALLERID(num)} is a valid station)
	; What if cid of outside matches our station ??????????????????? Or that never happens since we are using characters
	; Answer : Check IP of station!
	same => n,Set(LEG1=S)
	same => n,Set(AVA_ORIGIN=PEER)
	same => n,ExecIf($[ ${STN_ENABLED} ]?Goto(enabled))
	same => n,Noop(***** FORBIDDEN)
	same => n,Noop(***** FORBIDDEN : STATION ${CALLERID(num)} DISABLED !!!!!ENABLED(0))
	same => n,Noop(***** FORBIDDEN : STATION ${CALLERID(num)} DISABLED !!!!!ENABLED(0))
	same => n,Noop(***** FORBIDDEN : STATION ${CALLERID(num)} DISABLED !!!!!ENABLED(0))
	same => n,Set(AVA_DOUT=0)
	same => n,Set(DIALSTATUS=${DS_FORBIDDEN})
	same => n,Hangup
	same => n,Return()
	same => n(enabled),Noop(*************************************)
	;same => n,GoSub(sub-dout,s,1(${ARG2},${STN_DOUTPOLICY},${ARG1},${STN_DOUTROUTEID}))
	same => n,Noop(********** ENABLED : ${STN_ENABLED})
	same => n,Noop(************* DOUT : ${STN_DOUT})
	same => n,Noop(****** DOUT POLICY : ${STN_DOUTPOLICY})
	same => n,Noop(***** DOUT ROUTEID : ${STN_DOUTROUTEID})
	same => n,Goto(callee,1)


exten => bxfer,1,Noop(***** TRANSFER CHANNEL)
	same => n,ExecIf($[ ${EXISTS(${AGENT_EXT})} ]?Set(DEVICE_STATE(Custom:${AGENT_EXT})=NOT_INUSE))
	same => n,ExecIf($[ ${EXISTS(${CALLEE_EXT})} ]?Set(DEVICE_STATE(Custom:${CALLEE_EXT})=NOT_INUSE))
	same => n,StopMixMonitor()
	same => n,Noop(***** AVA_ORIGIN : ${AVA_ORIGIN})
	same => n,Noop(***** CDR(src) : ${CDR(src)})
	same => n,Noop(***** CDR(dst) : ${CDR(dst)})
	same => n,Noop(***** CDR(channel) : ${CDR(channel)})
	same => n,Noop(***** CDR(agent) : ${CDR(agent)})
	same => n,Noop(***** CDR(depid) : ${CDR(depid)})
	same => n,Noop(***** CDR(aid) : ${CDR(aid)})
	same => n,Noop(***** CDR(src) : ${CDR(src)})
	same => n,Noop(***** AGENT_EXT : ${AGENT_EXT})
	same => n,Set(_AVA_XSLEG=${AGENT_ID})
	same => n,Set(_AVA_XDLEG=${ARG2})
	same => n,Set(CDR(xferby)=${AGENT_ID})
	same => n,Goto(caller,clean)
	
exten => fwd,1,Noop(***** FORWARDED CHANNEL)
	;same => n,Set(DEVICE_STATE(Custom:${AVA_XSLEG})=NOT_INUSE)
	;same => n,Set(DEVICE_STATE(Custom:${AVA_XDLEG})=RINGING)
	;same => n,StopMixMonitor()
	same => n,Noop(***** AVA_ORIGIN : ${AVA_ORIGIN})
	same => n,Noop(***** CDR(src) : ${CDR(src)})
	same => n,Noop(***** CDR(dst) : ${CDR(dst)})
	same => n,Noop(***** CDR(channel) : ${CDR(channel)})
	same => n,Noop(***** CDR(agent) : ${CDR(agent)})
	same => n,Noop(***** CDR(depid) : ${CDR(depid)})
	same => n,Noop(***** CDR(aid) : ${CDR(aid)})
	same => n,Noop(***** CDR(src) : ${CDR(src)})
	same => n,Noop(***** AGENT_EXT : ${AGENT_EXT})
	;same => n,NoCDR()
	;same => n,ForkCDR()
	;same => n,Set(CDR(fwdto)=${AVA_XSLEG})
	same => n,Goto(caller,clean)
	
	



[sub-monitor]
; ARG1 : QUEUE,
; ARG2 : S CALLER
; ARG3 : D CALLEE
exten => s,1,Noop(***** RECORD)
	same => n,Noop(***** RECORD : )
	same => n,Noop(***** RECORD : )
	same => n,Noop(***** RECORD : )
	same => n,Noop(***** RECORD : )
	same => n,Noop(***** RECORD : )
	same => n,Set(REC_FILE=${STRFTIME(${EPOCH},,%G)}${STRFTIME(${EPOCH},,%m)}${STRFTIME(${EPOCH},,%d)}${STRFTIME(${EPOCH},,%H)}${STRFTIME(${EPOCH},,%M)}${STRFTIME(${EPOCH},,%S)}S${ARG2}D${ARG3}.wav)
	same => n,Set(REC_LOC=${STRFTIME(${EPOCH},,%G)}/${STRFTIME(${EPOCH},,%m)}/${STRFTIME(${EPOCH},,%d)})
	same => n,Set(REC_PATH=${REC_LOC}/${REC_FILE})
	same => n,MixMonitor(${REC_PATH},b,)
	same => n,Set(CDR(recordingfile)=${REC_PATH})
	same => n,Return()
	
[ava-queuepa]
exten => s,1,Goto(caller,1)
exten => s,2,Goto(agent,1)

exten => caller,1,Noop(***** Caller)
	same => n,Answer
	same => n,Set(CONNECTEDLINE(num)=${CDR(agent)})
	same => n,Set(DEVICE_STATE(Custom:${CDR(agent)})=INUSE)
	;same => n,Noop(************ UID : ${UNIQUEID})
	;same => n,Noop(************ LID : ${LINKEDID})
	;same => n,Noop(** CDR(uniqueid) : ${CDR(uniqueid)})
	;same => n,Noop(** CDR(linkedid) : ${linkedid})
	;same => n,Noop(********** AGENT : ${CDR(agent)})
	;same => n,Noop(************ SRC : ${CDR(src)})
	;same => n,Noop(***** DSTCHANNEL : ${CDR(dstchannel)})
	;same => n,Noop(******** CHANNEL : ${CDR(channel)})
	;same => n,Noop(******* AVA_DOUT : ${AVA_DOUT})
	;same => n,Noop(***** QUEUE_NAME : ${QUEUE_NAME})
	;same => n,Noop(***** QUEUE_NAME : ${QUEUE_INTRO})
	;same => n,Noop(***** CDR(agent) : ${CDR(agent)})
	;same => n,Noop(*** CDR(station) : ${CDR(station)})
	same => n,Set(CHRECFILE=${CDR(recordingfile)})
	same => n,ExecIf($[ "${QUEUE_INTRO}" = ""]?Goto(bridge))
	same => n,ExecIf($[ "${QUEUE_INTRO}" = "id" ]?Playback(${QPAPLAY1}&${SHELL(${SAYOP} ${AGENT_ID})}))
	same => n,ExecIf($[ "${QUEUE_INTRO}" = "ext" ]?Playback(${QPAPLAY1}&${SHELL(${SAYOP} ${AGENT_EXT})}))
	;same => n,ChanIsAvail(${DIALEDPEERNAME})
	;same => n,Noop(::::: Agent channel avail : ${AVAILCHAN})
	;same => n,Noop(:::: Agent channel status : ${AVAILSTATUS})
	;same => n,ExecIf($[ ! ${AVAILSTATUS} ]?Macro(hanger,ERROR))
	same => n(bridge),Bridge(${DIALEDPEERNAME})

exten => agent,1,Noop(***** Agent waiting ....)
	same => n,ResetCDR()
	same => n,NoCDR()
	;same => n,Noop(************ UID : ${UNIQUEID})
	;same => n,Noop(************ LID : ${LINKEDID})
	;same => n,Noop(** CDR(uniqueid) : ${CDR(uniqueid)})
	;same => n,Noop(** CDR(linkedid) : ${linkedid})
	;same => n,Noop(********** AGENT : ${CDR(agent)})
	;same => n,Noop(************ SRC : ${CDR(src)})
	;same => n,Noop(***** DSTCHANNEL : ${CDR(dstchannel)})
	same => n,Noop(******** CHANNEL : ${CDR(channel)})
	;same => n,Noop(******* AVA_DOUT : ${AVA_DOUT})
	;same => n,Noop(***** QUEUE_NAME : ${QUEUE_NAME})
	;same => n,Noop(***** CDR(agent) : ${CDR(agent)})
	;same => n,Noop(*** CDR(station) : ${CDR(station)})
	;same => n,Set(__AVA_QAGENT=201)
	same => n,Playback(${QAGENTHOLD})



[macro-dial]
; ARG1 : AVA_DSTRING
; ARG2 : AVA_DOPTIONS
; ARG3 : DIALTIMER
exten => s,1,Noop( ${ARG1} )
	same => n,Noop(##### AVA_ORIGIN : ${AVA_ORIGIN})
	same => n,Noop(##### AVA_DOPTIONS : ${AVA_DOPTIONS})
	same => n,Dial(${ARG1},,${ARG2})
	same => n,Noop(##### ${DIALSTATUS})
	same => n,Noop(##### ${DIALSTATUS})
	same => n,Noop(##### ${DIALSTATUS})
	same => n,Noop(##### ${DIALSTATUS})
	;same => n,NoCDR()
	same => n,Set(CDR(ctype)=${ARG3})
	same => n,MacroExit
;exten => h,1,Macro(hanger,)

[macro-u2upa]
; Use for Internal calls 
exten => s,1,Noop(##### ${CALLEE_EXT})
	same => n,Set(DEVICE_STATE(Custom:${CALLEE_EXT})=INUSE)
	same => n,MacroExit()

[sub-dout]
; ARG1 : callee
; ARG2 : dout policy(trunk)
; ARG3 : caller
; ARG4 : dout routeid(trunk)
; Result : AVA_DOUT=0/1
; Result : AVA_DOUTNUM=
; Result : AVA_DOUTNUMTYPE=tollfree,interstate,outstate,mobile,international
; Result : AVA_DOUTMSG = FORBIDDEN/GRANTED
; Result : AVA_DSTRING
exten => s,1,Noop(***** Checking dout)
	same => n,Noop(*********** CALLEE : ${ARG1})
	same => n,Noop(**** DOUT POLICYID : ${ARG2})
	same => n,Noop(*********** CALLER : ${ARG3})
	; Shatel/Pishgaman local numbers are 8 digits, starting with 9
	; Any non-8-digit starting with 9 is assumed outbound, so 9 would be removed
	same => n,ExecIf($[ ${REGEX( "^9" ${ARG1})} & ${LEN(${ARG1})} != 8 ]?Set(ARG1=${ARG1:1}))
	same => n,Set(AVA_DOUT=0)
	same => n,Set(AVA_DOUTMSG=FORBIDDEN)
	same => n,Set(AVA_DOUTNUM=${ARG1})
	same => n,Set(ARRAY(ROUTE_COUNT,ROUTE_ENABLED,ROUTE_NAME,ROUTE_GSM,ROUTE_PREPEND)=${ALP_ROUTE(${ARG4})})
	same => n,ExecIf($[ ! ${ROUTE_COUNT} ]?Goto(defaultroute))
	same => n,ExecIf($[ ${EXISTS(ROUTE_ENABLED)} ]?Goto(route))
	same => n,Set(AVA_DOUTMSG=ROUTE-DISABLED)
	same => n,Return()
	same => n(defaultroute),Noop(***** DefaultRouteID : ${DEFAULTROUTEID})
	same => n,ExecIf($[ "${DEFAULTROUTEID}" = "" ]?Return())
	same => n,Set(ARRAY(ROUTE_COUNT,ROUTE_ENABLED,ROUTE_NAME,ROUTE_GSM,ROUTE_PREPEND)=${ALP_ROUTE(${DEFAULTROUTEID})})
	same => n,ExecIf($[ ! ${ROUTE_COUNT} ]?Return())
	same => n(route),Noop(***** REGEXING NUMBER)
	same => n,ExecIf($[ ${REGEX( "^1" ${ARG1})} & ${LEN(${ARG1})} <= 8 ]?Set(AVA_DOUTNUMTYPE=tollfree))
	same => n,ExecIf($[ ${REGEX( "^[2-9]" ${ARG1})} & ${LEN(${ARG1})} <= 8 ]?Set(AVA_DOUTNUMTYPE=instate))
	same => n,ExecIf($[ ${REGEX( "^0[1-8]" ${ARG1})} ]?Set(AVA_DOUTNUMTYPE=outstate))
	same => n,ExecIf($[ ${REGEX( "^09" ${ARG1})} & ${LEN(${ARG1})} = 11 ]?Set(AVA_DOUTNUMTYPE=mobile))
	same => n,ExecIf($[ ${REGEX( "^00" ${ARG1})}]?Set(AVA_DOUTNUMTYPE=international))
	same => n,ExecIf($[ ${ALP_DOUTPOLICY(${AVA_DOUTNUMTYPE},${ARG2})}  ]?Goto(allowed))
	; Forbidden
	same => n,Noop(***** Caller(${ARG3}) FORBIDDEN FORBIDDEN ${AVA_DOUTNUMTYPE})
	same => n,Return()
	same => n(allowed),Noop(***** Caller(${ARG3}) granted for ${AVA_DOUTNUMTYPE})
	same => n,Set(AVA_DOUT=1)
	same => n,Set(AVA_DOUTMSG=GRANTED)
	same => n,ExecIf($[ ${ROUTE_GSM} ]?Goto(gsm))
	same => n,Goto(ret)
	same => n(gsm),Noop(***** GSM number formatting)
	same => n,ExecIf($[ "${AVA_DOUTNUMTYPE}" = "instate" ]?Set(AVA_DOUTNUM=${STATECODE}${ARG1}))
	same => n(ret),Noop(***** Final AVA_DOUTNUM : ${ROUTE_PREPEND}${ARG1})
	same => n,Set(AVA_DOUTNUM=${ROUTE_PREPEND}${AVA_DOUTNUM})
	same => n,Set(AVA_DSTRING=${DIALTECH}/${ROUTE_NAME}/${AVA_DOUTNUM})
	same => n,Return()
	
	
[sub-cid-correction]
exten => s,1,Noop(#### sub-cid-correction)
	same => n,ExecIf($[ ${LEN(${CALLERID(num)})} > 11 ]?Goto(above))
	same => n,ExecIf($[ ${LEN(${CALLERID(num)})} = 11 ]?Goto(normal))
	same => n,ExecIf($[ ${LEN(${CALLERID(num)})} = 10 ]?Goto(leadzero))
	same => n,ExecIf($[ ${LEN(${CALLERID(num)})} <= 8 ]?Goto(local))
	same => n,ExecIf($[ "${CALLERID(num)}" = "" ]?Goto(unknown))
	same => n,Noop(#### You are eather a Tester or Khafan Caller)
	same => n,Set(AVA_CIDNUM=${CALLERID(num)})
	same => n,Return()
	same => n(unknown),Noop(#### Unknown caller id)
	same => n,Set(AVA_CIDNUMM=00000000)
	same => n,Set(CALLERID(num)=00000000)
	same => n,Return()
	same => n(normal),Noop(#### Usual Caller number 11 digits)
	same => n,Set(ARRAY(AVA_CIDTYPE,AVA_CIDLOCATION)=fix,outstate)
	same => n,ExecIf($[ ${REGEX("^09" ${CALLERID(num)})} ]?Set(ARRAY(AVA_CIDTYPE,AVA_CIDLOCATION)=mob,onmob))
	same => n,ExecIf($[ ${REGEX("^${STATECODE}" ${CALLERID(num)})} ]?Set(ARRAY(AVA_CIDTYPE,AVA_CIDLOCATION)=fix,instate))
	same => n,Noop(#### No change on callerid)
	same => n,Set(AVA_CIDNUM=${CALLERID(num)})
	same => n,Return()
	same => n(above),Noop(#### Unusual Caller number greated than 11 digits )
	same => n,Set(ARRAY(AVA_CIDTYPE,AVA_CIDLOCATION,AVA_CIDNUM)=none,none,${CALLERID(num)})
	same => n,Return()
	same => n(leadzero),Noop(#### Leading zero)
	same => n,Set(CALLERID(num)=0${CALLERID(num)})
	same => n,Goto(normal)
	same => n(local),Noop(#### 8 Digits are state local)
	same => n,Noop(#### STATECODE (${STATECODE}) should be added to this number)
	same => n,Set(CALLERID(num)=${STATECODE}${CALLERID(num)})
	same => n,Set(ARRAY(AVA_CIDTYPE,AVA_CIDLOCATION,AVA_CIDNUM)=fix,instate,${CALLERID(num)})
	same => n,Return
	
	
[ava-users]
exten => _X.,1,Noop(::::: INTERNAL CALLS : U2U/I2U)
	; CALLEE_ variables  Must be defined before reaching here
	same => n,ExecIf($[ ! ${DEVMODE} ]?Goto(nodev))
	same => n,Noop(:::::::: CALLER FULLNAME : ${CALLER_FULLNAME}(${CALLER_EXT}))
	same => n,Noop(:::::::: CALLEE FULLNAME : ${CALLEE_FULLNAME}(${CALLEE_EXT}))
	same => n,Noop(::::::::: CALLEE PLUGGED : ${CALLEE_PLUGGED})
	same => n,Noop(:::::::::: CALLEE MOBILE : ${CALLEE_MOBILE})
	same => n,Noop(::::::::::: CALLEE EMAIL : ${CALLEE_EMAIL})
	same => n,Noop(:::::: CALLER RECORD OUT : ${CALLER_RECORDOUT})
	same => n,Noop(::::::: CALLEE RECORD IN : ${CALLEE_RECORDIN})
	same => n,Noop(::::::: CALLEE VOICEMAIL : ${CALLEE_VOICEMAIL})
	same => n,Noop(:::::::::: CALLEE DIVERT : ${CALLEE_DIVERT})
	same => n,Noop(::::::::::::: CALLEE DND : ${CALLEE_DND})
	same => n,Noop(::::::::::::: CALLEE FAX : ${CALLEE_FAX})
	same => n,Noop(::::: CALLEE CALLWAITING : ${CALLEE_CALLWAITING})
	same => n,Noop(:::::::::: CALLEE CAMPON : ${CALLEE_CAMPON})
	same => n,Noop(:::::::: CALLEE RINGTIME : ${CALLEE_RINGTIME})
	same => n(nodev),Noop(::::: DEVMODE(${DEVMODE}))
	same => n,ExecIf($[ ! ${CALLEE_PLUGGED}]?Goto(unplugged,1))
	same => n,ExecIf($[ ${CALLEE_STATION} = ""]?Goto(unplugged,1))
	same => n,ResetCDR()
	same => n,Set(CDR(station)=${CALLEE_STATION})
	same => n,Set(CDR(aid)=${CALLEE_ID})
	same => n,Set(CDR(depid)=${CALLEE_DEPID})
	same => n,Set(CDR(agent)=${CALLEE_EXT})
	same => n,ExecIf($[ ${EXISTS(${CALLER_ID})} ]?Goto(u2u))
	same => n,Noop(::::: I2U Call Setup)
	same => n,Set(CDR(ctype)=I2U)
	same => n,Set(_AVA_ORIGIN=I2U)
	same => n,Set(_AVA_DOPTIONS=G(ava-userpa^s^1))
	same => n,ExecIf($[ ${CALLEE_RECORDIN} ]?GoSub(sub-monitor,s,1(I2U,${CALLERID(num)},${CALLEE_EXT})))
	same => n,Goto(checkout)
	same => n(u2u),Noop(::::: U2U Call Setup)
	same => n,Set(CDR(ctype)=U2U)
	same => n,Set(_AVA_ORIGIN=U2U)
	same => n,Set(_AVA_DOPTIONS=M(u2upa^s^1))
	same => n,ExecIf($[ ${CALLEE_RECORDIN} | ${CALLER_RECORDOUT} ]?GoSub(sub-monitor,s,1(U2U,${CALLER_EXT},${CALLEE_EXT})))
	same => n(checkout),Noop(::::: Checkout)
	;same => n,Set(AVA_DOPTIONS=M(user-answered))
	same => n,ExecIf($[ ${CALLEE_CALLWAITING} ]?Goto(godial))
	;same => n,ExecIf($[ ${CALLEE_DND}]?Goto(lobby,1))
	same => n,Set(AVA_DSTRING=${DIALTECH}/${CALLEE_STATION})
	same => n,ExecIf($[ "${DEVICE_STATE(Custom:${EXTEN})}" != "NOT_INUSE" ]?Goto(lobby,1))
	same => n,ExecIf($[ ${EXISTS(${CALLER_EXT})} ]?Set(DEVICE_STATE(Custom:${CALLER_EXT})=INUSE))
	same => n,Set(DEVICE_STATE(Custom:${CALLEE_EXT})=RINGING)
	same => n(godial),Macro(dial,${AVA_DSTRING},${AVA_DOPTIONS},${AVA_ORIGIN})


exten => unplugged,1,Noop(***** Agent is unplugged )
		;same => n,ResetCDR()
		;same => n,Set(CDR(ctype)=UNPLUGGED)
		same => n,Set(DIALSTATUS=UNAVAILABLE)
		same => n,Hangup()
	
exten => lobby,1,Noop(***** Lobby)
	same => n,Wait(5)
	
exten => h,1,Macro(hanger,)
	
	
	
[ava-userpa]
exten => s,1,Goto(caller,1)
exten => s,2,Goto(callee,1)
exten => caller,1,Noop(:::::)
	;same => n,NoCDR()
	same => n,Set(_AVA_ORIGIN=I2U)
	same => n,Set(CDR(ctype)=I2U)
	same => n,Set(CDR(number)=${CALLERID(num)})
	same => n,Set(CDR(station)=${CALLEE_STATION})
	same => n,Set(CDR(aid)=${CALLEE_ID})
	same => n,Set(CDR(depid)=${CALLEE_DEPID})
	same => n,Set(CDR(agent)=${CALLEE_EXT})
	
	same => n,Wait(1)
	same => n,Noop(:::: ${CALLERID(num)})
	same => n,Bridge(${DIALEDPEERNAME})

exten => callee,1,Noop(::::: CALLEE : ${CALLEE_EXT})
	same => n,NoCDR()
	same => n,Set(_AVA_ORIGIN=NONE)
	same => n,Set(DEVICE_STATE(Custom:${CALLEE_EXT})=INUSE)
	same => n,Playback(Theme-click&Theme-click&Theme-click)
	
exten => h,1,Macro(hanger,)
	
	
	
	
	
[ava-newcall]
exten => _X.,1,Noop( :::: Exten ${EXTEN})
		same => n,Set(CDR(ctype)=U2O)
		same => n,Set(AVA_ORIGIN=U2O)
		same => n,Set(AVA_DOPTIONS=)
		same => n,Set(CDR(number)=${CUT(EXTEN,\,,1)})
		same => n,Set(CDR(agent)=${CUT(EXTEN,\,,2)})
		same => n,Set(AVA_AGENT=${CUT(EXTEN,\,,2)})
		same => n,Set(CDR(external_id)=${CUT(EXTEN,\,,3)})
		same => n,Set(SURVEY=${CUT(EXTEN,\,,4)})
		same => n,ExecIf($[ ${SURVEY} ]?Set(AVA_DOPTIONS=F))
		same => n,GoSub(sub-monitor,s,1(U2O,${CDR(agent)},${CDR(number)}))
		same => n,Set(DEVICE_STATE(Custom:${CDR(agent)})=INUSE)
		same => n,Dial(SIP/TCI/${CDR(number)},,${AVA_DOPTIONS})
		same => n,Wait(1)
		same => n,Read(CDR(score),VoterMenu,1,,1,3)
		same => n,ExecIf($[ "${CDR(score)}" != "" ]?Set(ALP_SCORE(${CONNECTEDLINE(num)},${CALLERID(num)},${AVA_SCORE},${CDR(uniqueid)},${CDR(linkedid)},U2O)=1))
		same => n,Noop(:::: Voted : ${CDR(score)})
		same => n,Noop(:::: Voted : ${CDR(score)})
		same => n,Noop(:::: Voted : ${CDR(score)})
	
exten => h,1,Macro(hanger,)


[ava-studio]
exten => s,1,Noop(Ava-studio : )
	same => n,GotoIf($[ ${STNFIRSTLOGGER} ]?stnpickfirst:stnpicklast) 
	same => n(stnpickfirst),Set(ARRAY(CALLER_ID,CALLER_ENABLED,CALLER_FULLNAME,CALLER_EXT,CALLER_MOBILE,CALLER_EMAIL,CALLER_RECORDOUT,CALLER_VOTEOUT,CALLER_DEPID,CALLER_DOUTPOLICY,CALLER_DOUTROUTEID,CALLER_DOUTTIMER)=${ALP_SOURCEPICKFIRST(${CALLERID(num)})})
	same => n,Goto(aftercheck)
	same => n(stnpicklast),Set(ARRAY(CALLER_ID,CALLER_ENABLED,CALLER_FULLNAME,CALLER_EXT,CALLER_MOBILE,CALLER_EMAIL,CALLER_RECORDOUT,CALLER_VOTEOUT,CALLER_DEPID,CALLER_DOUTPOLICY,CALLER_DOUTROUTEID,CALLER_DOUTTIMER)=${ALP_SOURCEPICKLAST(${CALLERID(num)})})
	same => n(aftercheck),Noop(::: CALLER_FULLNAME)
	same => n,ExecIf($[ ${EXISTS(${CALLER_EXT})}]?Goto(record))
	same => n,Noop(::::: Found no one logged on this station)
	same => n,Hangup
	same => n(record),Noop(::::: Preparing to record)
	same => n,Set(RECFILE=ST${STRFTIME(${EPOCH},,%G)}${STRFTIME(${EPOCH},,%m)}${STRFTIME(${EPOCH},,%d)}${STRFTIME(${EPOCH},,%H)}${STRFTIME(${EPOCH},,%M)}${STRFTIME(${EPOCH},,%S)}BY${CALLER_EXT}.wav)
	same => n,Set(FULLPATH=/usr/share/alopad/asterisk/sounds/studio/${RECFILE})
	same => n,Wait(1)
	same => n,Record(studio/${RECFILE},,,k)
	same => n,Noop(:::::: Recording file : ${RECFILE})
	same => n,Noop(:::::: Agent : ${CALLER_EXT})
	same => n,Set(ALP_STUDIO(${RECFILE},${CALLER_EXT})=1)
	same => n,Set(DURATION=${SHELL(/bin/sox ${FULLPATH} -n stat 2>&1 | sed -n 's#^Length (seconds):[^0-9]*\([0-9.]*\)$#\1#p' | tr -d '\n')})
	same => n,Noop(::::: Duration : ${DURATION} )
	;same => n,Set(CURL_AVA_RESULT=${CURL(http://localhost:8060/ws/studio?filename=${RECFILE}&agent=${CALLER_EXT})})
	same => n,Set(CURL_ARTA_RESULT=${CURL(${ARTA_CURL}/addsound?FileName=${RECFILE}&Duration=${DURATION}&agent=${CALLER_EXT})})
	same => n,Hangup


[queue-holdmenu1]
exten => *,1,Playback(beep)
    same => n,Set(CDR(ctype=HOLDMENU))
	same => n,Noop( Queue Position : ${QUEUEPOSITION})
	same => n,Wait(2)

	
exten => 1,1,Playback(ThanksForCalling)
	same => n,Wait(3)

	
	
	
	
